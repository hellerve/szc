(define (make-initial)
  #{:constants #{} :seq 0 :body ""})

(define (compile exprs)
  (reduce compile-expr (make-initial) exprs))

(define translations
  #{"display" "puts"})

(define (translate expr)
  (get-from translations (->string expr) expr))

(define PTR-SIZE 4)

(define (get-arg state str)
  (if (in? state str)
    state
    (let ((nstate (hash:update state
                               :constants
                               (lambda (constants) (hash:set constants str (state :seq))))))
      (hash:update nstate :seq add1))))

(define (compile-expr state expr)
  (let* ((fun    (translate (car expr)))
         (args   (cdr expr))
         (nstate (reduce get-arg state args))
         (stack  (+ (*
                      (round (/ (* (+ (length args) 0.5) PTR-SIZE) (* 4 PTR-SIZE)))
                      (* 4 PTR-SIZE))
                    PTR-SIZE)))
    (hash:update nstate :body
                 (lambda (body)
                    (++ body "\tsubl\t$" (->string stack) ",%esp\n"
                             ((reduce (lambda (acc x)
                                        (hash:update (hash:update acc :body
                                                     (lambda (body)
                                                        (++ body "\tmovl\t$.LC" (->string x)
                                                            ","
                                                            (if (> (acc :index) 0)
                                                              (->string (* (acc :index) PTR-SIZE))
                                                              "")
                                                            "(%esp)\n")))
                                                      :index add1))
                                      #{:body "" :index 0}
                                      (map (nstate :constants) args)) :body)
                                    "\tcall\t" (->string fun)
                                    "\n\taddl\t$" (->string stack) ", %esp")))))

(define (write-constants state)
  (hash:kv-reduce (lambda (acc x) (++ acc "\n.LC" (->string (cadr x)) ":\n\t.string \"" (car x) "\""))
                  "\t.section\t.rodata"
                  (state :constants)))

(define prolog
"    .text
    .globl main
        .type   main, @function
    main:
        leal    4(%esp), %ecx
        andl    $-16, %esp
        pushl   -4(%ecx)
        pushl   %ebp
        movl    %esp, %ebp
        pushl   %ecx")

(define epilog
"        popl    %ecx
        popl    %ebp
        leal    -4(%ecx), %esp
        ret")

(define glob-epilog ".size   main, .-main")

(define (main from to)
  (let* ((contents (parse from))
         (state (compile contents))
         (output (open-output-file to)))
    (begin
      (write prolog output)
      (write (state :body) output)
      (write epilog output)
      (write glob-epilog output)
      (write (write-constants state) output)
      (close-output-file output))))

(main (car zepto:args) (cadr zepto:args))
